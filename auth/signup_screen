import 'dart:developer';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:myapp/auth/auth_service.dart';
import 'package:myapp/auth/login_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:myapp/widgets/button.dart';
import 'package:myapp/widgets/textfield.dart';
import 'package:flutter/material.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _auth = AuthService();
  final _email = TextEditingController();
  final _password = TextEditingController();
  bool _isLoading = false; // Add loading state

  @override
  void dispose() {
    _email.dispose();
    _password.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: true,
      backgroundColor: const Color(0xFFFFF3D9),
      body: SafeArea(
        child: Center(
          child: SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 25),
              child: Column(
                children: [
                  SizedBox(height: 50),

                  const Text(
                    "Sign Up",
                    style: TextStyle(
                      fontSize: 30,
                      fontWeight: FontWeight.bold,
                      color: Colors.brown,
                    ),
                  ),

                  const SizedBox(height: 50),

                  CustomTextField(
                    hint: "Email",
                    label: "Email",
                    controller: _email,
                  ),

                  const SizedBox(height: 20),

                  CustomTextField(
                    hint: "Password",
                    label: "Password",
                    isPassword: true,
                    controller: _password,
                  ),

                  const SizedBox(height: 30),

                  // Show loading indicator when processing
                  _isLoading
                      ? const CircularProgressIndicator()
                      : CustomButton(label: "Signup", onPressed: _signup),

                  const SizedBox(height: 5),

                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text("Already have an account? "),
                      InkWell(
                        onTap: _isLoading ? null : () => goToLogin(context),
                        child: const Text(
                          "Login",
                          style: TextStyle(
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      const SizedBox(width: 10),
                    ],
                  ),

                  SizedBox(height: 40),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  goToLogin(BuildContext context) {
    log("Navigating to LoginScreen");
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => const LoginScreen()),
    );
  }

  _signup() async {
    // Prevent multiple submissions
    if (_isLoading) return;

    if (_email.text.isEmpty || _password.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please fill in all fields")),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      log("Starting signup process...");

      final user = await _auth.createUserWithEmailAndPassword(
        _email.text.trim(),
        _password.text.trim(),
      );

      if (user != null) {
        final uid = user.uid;
        log("User Created Successfully with UID: $uid");

        // Create user document with initial task statistics
        try {
          log("Creating user document in Firestore...");

          // Use batch write to ensure atomicity
          final batch = FirebaseFirestore.instance.batch();

          // Create main user document
          final userDoc = FirebaseFirestore.instance
              .collection('users')
              .doc(uid);
          batch.set(userDoc, {
            'email': _email.text.trim(),
            'createdAt': FieldValue.serverTimestamp(),
            'updatedAt': FieldValue.serverTimestamp(),
            'tasksCount': 0,
            'completedTasksCount': 0,
            'pendingTasksCount': 0,
            'profile': {
              'displayName':
                  _email.text.trim().split(
                    '@',
                  )[0], // Use email prefix as initial display name
              'photoURL': '',
            },
          });

          // Create a placeholder in tasks subcollection to ensure it exists
          final taskDoc = userDoc.collection('tasks').doc('_init');
          batch.set(taskDoc, {
            'placeholder': true,
            'createdAt': FieldValue.serverTimestamp(),
            'note': 'This document ensures the tasks subcollection exists',
          });

          // Commit the batch
          await batch.commit();

          log("User Info and Task Structure Saved to Firestore successfully");

          // Verify the data was written
          final userSnapshot = await userDoc.get();
          if (userSnapshot.exists) {
            log(
              "Verification: User document exists with data: ${userSnapshot.data()}",
            );
          } else {
            log("Warning: User document was not created successfully");
          }
        } catch (e) {
          log("Firestore write failed: $e");
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text("Failed to save user info: ${e.toString()}"),
              backgroundColor: Colors.red,
            ),
          );
          return;
        }

        // Show success message
        if (!mounted) return;

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text("Signup successful! Redirecting to login..."),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );

        // Wait 2 seconds, then navigate to login
        await Future.delayed(const Duration(seconds: 2));
        if (!mounted) {
          log("Widget no longer mounted, cannot navigate");
          return;
        }

        log("Navigating to LoginScreen");
        goToLogin(context);
      }
    } on FirebaseAuthException catch (e) {
      log("FirebaseAuthException: ${e.code} - ${e.message}");
      String errorMessage;
      switch (e.code) {
        case 'email-already-in-use':
          errorMessage = "This email is already in use.";
          break;
        case 'invalid-email':
          errorMessage = "The email address is not valid.";
          break;
        case 'weak-password':
          errorMessage = "The password is too weak (min 6 characters).";
          break;
        case 'operation-not-allowed':
          errorMessage = "Email/password accounts are not enabled.";
          break;
        default:
          errorMessage = e.message ?? "Signup failed. Please try again.";
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: Color(0xFFB71C1C),
          ),
        );
      }
    } catch (e) {
      log("General error during signup: $e");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Something went wrong: ${e.toString()}"),
            backgroundColor: Color(0xFFB71C1C),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
}
