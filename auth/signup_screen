import 'dart:developer';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:myapp/auth/auth_service.dart';
import 'package:myapp/auth/login_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:myapp/home_screen.dart';
import 'package:myapp/widgets/button.dart';
import 'package:myapp/widgets/textfield.dart';
import 'package:flutter/material.dart';
// import '../screens/GlobalState.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _auth = AuthService();

  // final _name = TextEditingController();
  final _email = TextEditingController();
  final _password = TextEditingController();

  @override
  void dispose() {
    // _name.dispose();
    _email.dispose();
    _password.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // ---------------------------------------------
      resizeToAvoidBottomInset: true, // ✅ 默认是 true，确保键盘弹出时布局会自动调整
      // ---------------------------------------------
      backgroundColor: const Color(0xFFFFF3D9),
      body: SafeArea(
        child: Center(
          child: SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 25),
              child: Column(
                children: [
                  SizedBox(height: 50),

                  const Text(
                    "Sign Up",
                    style: TextStyle(
                      fontSize: 30,
                      fontWeight: FontWeight.bold,
                      color: Colors.brown,
                    ),
                  ),

                  const SizedBox(height: 50),

                  CustomTextField(
                    hint: "Email",
                    label: "Email",
                    controller: _email,
                  ),

                  const SizedBox(height: 20),

                  CustomTextField(
                    hint: "Password",
                    label: "Password",
                    isPassword: true,
                    controller: _password,
                  ),

                  const SizedBox(height: 30),

                  CustomButton(label: "Signup", onPressed: _signup),

                  const SizedBox(height: 5),

                  // *** notification: in sign up page, but alr got account, turn to login page
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text("Already have an account? "),
                      InkWell(
                        onTap: () => goToLogin(context),
                        child: const Text(
                          "Login",
                          style: TextStyle(
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      // ------------------------------- 保留底部空隙
                      const SizedBox(width: 10),
                      // -------------------------------
                    ],
                  ),

                  SizedBox(height: 40),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  goToLogin(BuildContext context) {
    log("Navigating to LoginScreen");
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => const LoginScreen()),
    );
  }

  // goToHome(BuildContext context) => Navigator.push(
  //       context,
  //       MaterialPageRoute(builder: (context) => const HomeScreen()),
  //     );

  // 改动
  _signup() async {
    if (_email.text.isEmpty || _password.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please fill in all fields")),
      );
      return;
    }

    try {
      final user = await _auth.createUserWithEmailAndPassword(
        _email.text.trim(),
        _password.text.trim(),
      );
      if (user != null) {
        
        // *firestore
        final uid = user.uid;
        log("User Created Successfully");

        // *firestore: Save user info to Firestore
        try {
          await FirebaseFirestore.instance.collection('users').doc(uid).set({
            'email': _email.text.trim(),
            'createdAt': Timestamp.now(),
          });

          log("User Info Saved to Firestore"); // ✅ 若成功，这句才会执行
        } catch (e) {
          log("Firestore write failed: $e"); // ❌ 捕捉写入失败的原因
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text("Failed to save user info to Firestore."),
              backgroundColor: Colors.red,
            ),
          );
          return; // 失败后不继续
        }


        // **** GlobalState
        // GlobalState.username = _name.text.trim();
        // goToHome(context);

        // ✅ Show success message
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text("Signup successful! Redirecting to login..."),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );

        // ✅ Wait 2 seconds, then navigate to login
        await Future.delayed(const Duration(seconds: 2));
        if (!mounted) {
          log("Widget no longer mounted, cannot navigate");
          return;
        }

        log("Navigating to LoginScreen");
        goToLogin(context);
      }
    } on FirebaseAuthException catch (e) {
      // Firebase 的错误
      String errorMessage;
      switch (e.code) {
        case 'email-already-in-use':
          errorMessage = "This email is already in use.";
          break;
        case 'invalid-email':
          errorMessage = "The email address is not valid.";
          break;
        case 'weak-password':
          errorMessage = "The password is too weak (min 6 characters).";
          break;
        default:
          errorMessage = e.message ?? "Signup failed. Please try again.";
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(errorMessage),
          backgroundColor: Color(0xFFB71C1C),
        ),
      );
    } catch (e) {
      // 其他未知错误
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Something went wrong. Please try again."),
          backgroundColor: Color(0xFFB71C1C),
        ),
      );
    }
  }
}
