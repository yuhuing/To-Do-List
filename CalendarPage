import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';

void main() {
  runApp(MyApp());
}

// Main App Widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Calendar App',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: CalendarPage(), // ✅ <- Your calendar screen here
    );
  }
}

// CalenderPage (Stateful)
// because need to track selected date, completed days and focused month
class CalendarPage extends StatefulWidget {
  @override
  _CalendarPageState createState() => _CalendarPageState();
}

DateTime _stripTime(DateTime dt) => DateTime(dt.year, dt.month, dt.day);

// State Class for CalendarPage
class _CalendarPageState extends State<CalendarPage> {
  DateTime _focusedDay = DateTime(
    2025,
    3,
    1,
  ); // which month is shown on calendar
  DateTime? _selectedDay; // the day user taps on

  // Task and completion date
  final Map<DateTime, List<String>> _tasks = {
    _stripTime(DateTime(2025, 3, 4)): ['Task 1', 'Task 2', 'Task 3'],
    _stripTime(DateTime(2025, 3, 5)): ['Task 1', 'Task 2', 'Task 3'],
    _stripTime(DateTime(2025, 3, 7)): ['Task 1'],
    _stripTime(DateTime(2025, 3, 14)): ['Task 1', 'Task 2', 'Task 3'],
    _stripTime(DateTime(2025, 3, 27)): ['Task 1'],
  };

  final Set<DateTime> _completedDays = {
    _stripTime(DateTime(2025, 3, 4)),
    _stripTime(DateTime(2025, 3, 5)),
    _stripTime(DateTime(2025, 3, 14)),
  };

  // Build method (UI layout)
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Task Calendar'),
        backgroundColor: const Color(0xFF6F4E37),
      ),
      body: Column(
        children: [
          // calendar widget
          TableCalendar(
            firstDay: DateTime.utc(2025, 1, 1),
            lastDay: DateTime.utc(2025, 12, 31),
            focusedDay:
                _focusedDay, // the month that shown on the screen that mentioned before
            calendarFormat: CalendarFormat.month,
            selectedDayPredicate: (day) => isSameDay(_selectedDay, day),

            // 1. Updates _delectedday and _focusedDay
            // 2. opens bottom sheet if tasks exist on that date
            onDaySelected: (selected, focused) {
              final normalized = _stripTime(selected);

              setState(() {
                _selectedDay = selected;
                _focusedDay = focused;
              });

              if (_tasks.containsKey(normalized)) {
                showModalBottomSheet(
                  context: context,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.vertical(
                      top: Radius.circular(20),
                    ),
                  ),
                  builder: (context) => _buildTaskList(normalized),
                );
              }
            },

            // Calendar builders
            calendarBuilders: CalendarBuilders(
              markerBuilder: (context, date, events) {
                final normalizedDate = _stripTime(date);
                final tasks = _tasks[normalizedDate] ?? [];

                if (tasks.isEmpty) return const SizedBox.shrink();

                final now = DateTime.now();
                final daysLeft =
                    normalizedDate.difference(_stripTime(now)).inDays;

                List<Widget> markers =
                    tasks.map((task) {
                      Color boxColor;

                      if (daysLeft <= 3) {
                        boxColor = Colors.red;
                      } else if (daysLeft <= 7) {
                        boxColor = Colors.yellow;
                      } else {
                        boxColor = Colors.green;
                      }

                      return Container(
                        margin: const EdgeInsets.symmetric(vertical: 1),
                        padding: const EdgeInsets.symmetric(
                          horizontal: 4,
                          vertical: 1,
                        ),
                        decoration: BoxDecoration(
                          color: boxColor,
                          borderRadius: BorderRadius.circular(4),
                        ),
                        child: Text(
                          task,
                          style: const TextStyle(
                            fontSize: 8,
                            color: Colors.black,
                          ),
                          overflow: TextOverflow.ellipsis,
                        ),
                      );
                    }).toList();

                return Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const SizedBox(height: 20), // Push markers below the date
                    ...markers.take(3), // Optional: limit to show max 3 tasks
                  ],
                );
              },
            ),
          ),
          const Spacer(),
        ],
      ),
      bottomNavigationBar: Container(
        height: 70,
        decoration: const BoxDecoration(
          color: Color(0xFFEADDC8), // Soft beige
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            IconButton(
              icon: const Icon(Icons.today),
              onPressed: () {}, // Today’s Task
            ),
            IconButton(
              icon: const Icon(Icons.access_time),
              onPressed: () {}, // Long-term Tasks
            ),
            Container(
              height: 60,
              width: 60,
              decoration: BoxDecoration(
                color: Color(0xFF6F4E37), // Brown center button
                shape: BoxShape.circle,
              ),
              child: IconButton(
                icon: const Icon(Icons.calendar_month, color: Colors.white),
                onPressed: () {}, // Calendar
              ),
            ),
            IconButton(
              icon: const Icon(Icons.groups),
              onPressed: () {}, // Group Collaboration
            ),
            IconButton(
              icon: const Icon(Icons.person),
              onPressed: () {}, // Profile
            ),
          ],
        ),
      ),
    );
  }

  // Task List Modal Sheet
  Widget _buildTaskList(DateTime day) {
    final tasks = _tasks[day] ?? [];

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            '${day.day}',
            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          ...tasks.map(
            (task) => Card(
              color: Colors.green.shade100,
              child: ListTile(
                title: Text(task),
                trailing: const Icon(Icons.check_box_outline_blank),
                subtitle: const Text('Details...'),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Navigation button widget
  Widget _navButton(String label) {
    return ElevatedButton(
      onPressed: () {
        // Add navigation logic here
      },
      style: ElevatedButton.styleFrom(
        backgroundColor:
            label == 'Page 4' ? Colors.orange : const Color(0xFF6F4E37),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
      child: Text(label),
    );
  }
}
