import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
//import 'package:intl/intl.dart';
import 'package:fl_chart/fl_chart.dart';
import 'TaskModel.dart';
import 'package:myapp/widgets/AppDrawer.dart';
import 'TaskProvider.dart';

class PersonalProfile extends StatelessWidget {

  const PersonalProfile({super.key});

  // /// Counts how many tasks are marked done today
  // int getCompletedTaskCount() {
  //   return todayTasks.where((task) => task.isDone).length;
  // }

  // /// Counts how many tasks are still pending today
  // int getRemainingTaskCount() {
  //   return todayTasks.where((task) => !task.isDone).length;
  // }

  /// Calculates the fraction of tasks done this week
  double getWeeklyCompletionRate(Map<DateTime, List<Task>> allTasks) {
    final now = DateTime.now();
    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));

    final weeklyTasks = allTasks.entries
        .where((entry) => !entry.key.isBefore(DateTime(startOfWeek.year, startOfWeek.month, startOfWeek.day)))
        .expand((entry) => entry.value)
        .toList();

    if (weeklyTasks.isEmpty) return 0.0;

    final completed = weeklyTasks.where((task) => task.isDone).length;
    return completed / weeklyTasks.length;
  }

  /// Builds the data points for the 7‑day line graph
  List<FlSpot> getWeeklyGraphData(Map<DateTime, List<Task>> allTasks) {
    final now = DateTime.now();
    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));

    // Initialize a map from day index (0=Mon..6=Sun) to list of tasks
    Map<int, List<Task>> dailyMap = {for (var i = 0; i < 7; i++) i: []};

    for (var entry in allTasks.entries) {
      final diff = entry.key.difference(DateTime(startOfWeek.year, startOfWeek.month, startOfWeek.day)).inDays;
      if (diff >= 0 && diff < 7) {
        dailyMap[diff]!.addAll(entry.value);
      }
    }

    // For each day, compute percent done and return an FlSpot(x, y)
    return dailyMap.entries.map((e) {
      final total = e.value.length;
      final done = e.value.where((t) => t.isDone).length;
      final percent = total > 0 ? (done / total) * 100 : 0.0;
      return FlSpot(e.key.toDouble(), percent);
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    final taskProvider = Provider.of<TaskProvider>(context);
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final todayTasks = taskProvider.getTasksFor(today);
    final allTasks = taskProvider.allTasks;

    final completed = todayTasks.where((t) => t.isDone).length;
    final remaining = todayTasks.where((t) => !t.isDone).length;
    final weeklyPercentage = (getWeeklyCompletionRate(allTasks) * 100).toStringAsFixed(1);
    final graphData = getWeeklyGraphData(allTasks);

    return Scaffold(

      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.brown, size: 32),
      ),

      drawer: const AppDrawer(),

      ///******** 看要不要删这个
      backgroundColor: const Color(0xFFFFF3D9),

      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12),
          child: Column(
            children: [

              const SizedBox(height: 10),

              // Profile Heading
              const Center(
                child: Text(
                  "Personal Profile",
                  style: TextStyle(
                    fontSize: 30,
                    fontWeight: FontWeight.bold,
                    color: Colors.brown,
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Avatar and username
              CircleAvatar(
                radius: 45,
                backgroundColor: Colors.brown[200],
                child: Text(
                  '?',
                  style: const TextStyle(fontSize: 40, color: Colors.white),
                ),
              ),

              const SizedBox(height: 30),

              // Row showing completed vs pending counts
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _buildStatBox("Completed Tasks", "$completed", Colors.green),
                  _buildStatBox("Pending Tasks", "$remaining", Colors.red),
                ],
              ),

              const SizedBox(height: 20),

              Expanded(
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: const Color(0xFFF3E5AB),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Column(
                    children: [
                      // Display weekly percentage
                      Text(
                        "$weeklyPercentage%\naverage tasks completed this week",
                        textAlign: TextAlign.center,
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.brown,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 20),
                      // The line graph itself
                      Expanded(
                        child: LineChart(
                          LineChartData(
                            minX: 0,
                            maxX: 6,
                            minY: 0,
                            maxY: 100,
                            titlesData: FlTitlesData(
                              bottomTitles: AxisTitles(
                                sideTitles: SideTitles(
                                  showTitles: true,
                                  getTitlesWidget: (v, _) {
                                    const days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
                                    return Text(days[v.toInt()], style: const TextStyle(fontSize: 12));
                                  },
                                ),
                              ),
                              leftTitles: AxisTitles(
                                sideTitles: SideTitles(showTitles: true, interval: 20),
                              ),
                            ),
                            lineBarsData: [
                              LineChartBarData(
                                spots: graphData, // our data points
                                isCurved: true,
                                color: Colors.brown,
                                dotData: FlDotData(show: true),
                                belowBarData: BarAreaData(show: false),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// Helper widget to build a small colored box with a stat
  Widget _buildStatBox(String title, String value, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      width: 150,
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),      // light background
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Text(
            value,
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: color),
          ),
          const SizedBox(height: 6),
          Text(
            title,
            textAlign: TextAlign.center,
            style: const TextStyle(color: Colors.brown),
          ),
        ],
      ),
    );
  }
}
