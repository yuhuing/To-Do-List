import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:fl_chart/fl_chart.dart';
import 'TaskModel.dart';
import '../widgets/AppDrawer.dart';
import 'TaskProvider.dart';

class PersonalProfile extends StatelessWidget {
  const PersonalProfile({super.key});

  // Color constants matching the pattern
  static const Color espresso = Color(0xFF2C1810);
  static const Color coffeeBrown = Color(0xFF4A2C2A);
  static const Color caramelBrown = Color(0xFF8B5A2B);
  static const Color creamWhite = Color(0xFFFAF7F2);
  static const Color milkFoam = Color(0xFFF5F2ED);
  static const Color cardBg = Color(0xFFFFFFFF);
  static const Color coffeeShadow = Color(0x1A2C1810);

  /// Calculates the fraction of tasks done this week
  double getWeeklyCompletionRate(Map<DateTime, List<Task>> allTasks) {
    final now = DateTime.now();
    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));

    final weeklyTasks = allTasks.entries
        .where((entry) => !entry.key.isBefore(DateTime(startOfWeek.year, startOfWeek.month, startOfWeek.day)))
        .expand((entry) => entry.value)
        .toList();

    if (weeklyTasks.isEmpty) return 0.0;

    final completed = weeklyTasks.where((task) => task.isDone).length;
    return completed / weeklyTasks.length;
  }

  /// Builds the data points for the 7â€‘day line graph
  List<FlSpot> getWeeklyGraphData(Map<DateTime, List<Task>> allTasks) {
    final now = DateTime.now();
    final startOfWeek = now.subtract(Duration(days: now.weekday - 1));

    // Initialize a map from day index (0=Mon..6=Sun) to list of tasks
    Map<int, List<Task>> dailyMap = {for (var i = 0; i < 7; i++) i: []};

    for (var entry in allTasks.entries) {
      final diff = entry.key.difference(DateTime(startOfWeek.year, startOfWeek.month, startOfWeek.day)).inDays;
      if (diff >= 0 && diff < 7) {
        dailyMap[diff]!.addAll(entry.value);
      }
    }

    // For each day, compute percent done and return an FlSpot(x, y)
    return dailyMap.entries.map((e) {
      final total = e.value.length;
      final done = e.value.where((t) => t.isDone).length;
      final percent = total > 0 ? (done / total) * 100 : 0.0;
      return FlSpot(e.key.toDouble(), percent);
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    final taskProvider = Provider.of<TaskProvider>(context);
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final todayTasks = taskProvider.getTasksFor(today);
    final allTasks = taskProvider.allTasks;

    final completed = todayTasks.where((t) => t.isDone).length;
    final remaining = todayTasks.where((t) => !t.isDone).length;
    final weeklyPercentage = (getWeeklyCompletionRate(allTasks) * 100).toStringAsFixed(1);
    final graphData = getWeeklyGraphData(allTasks);

    return Scaffold(
      drawer: const AppDrawer(),
      backgroundColor: creamWhite,
      appBar: AppBar(
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Icon(Icons.person, color: Colors.white, size: 20),
            ),
            const SizedBox(width: 12),
            const Text(
              "Personal Profile",
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
          ],
        ),
        backgroundColor: espresso,
        foregroundColor: Colors.white,
        centerTitle: true,
        elevation: 0,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [espresso, coffeeBrown],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // Profile Avatar Section
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: cardBg,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: coffeeShadow,
                      blurRadius: 8,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    CircleAvatar(
                      radius: 45,
                      backgroundColor: caramelBrown.withOpacity(0.2),
                      child: Icon(
                        Icons.person,
                        size: 50,
                        color: caramelBrown,
                      ),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      "Welcome Back!",
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: espresso,
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 16),

              // Today's Tasks Stats
              Row(
                children: [
                  Expanded(
                    child: _buildStatCard("Completed", "$completed", Colors.green),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildStatCard("Pending", "$remaining", Colors.red),
                  ),
                ],
              ),

              const SizedBox(height: 16),

              // Weekly Progress Chart
              Expanded(
                child: Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: cardBg,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: coffeeShadow,
                        blurRadius: 8,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        "Weekly Progress",
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: espresso,
                        ),
                      ),
                      const SizedBox(height: 20),
                      Expanded(
                        child: Row(
                          children: [
                            // Left side - Smaller graph
                            Expanded(
                              flex: 3,
                              child: LineChart(
                                LineChartData(
                                  minX: 0,
                                  maxX: 6,
                                  minY: 0,
                                  maxY: 100,
                                  gridData: FlGridData(
                                    show: true,
                                    drawVerticalLine: false,
                                    horizontalInterval: 50,
                                    getDrawingHorizontalLine: (value) {
                                      return FlLine(
                                        color: Colors.grey.withOpacity(0.2),
                                        strokeWidth: 1,
                                      );
                                    },
                                  ),
                                  titlesData: FlTitlesData(
                                    rightTitles: const AxisTitles(
                                      sideTitles: SideTitles(showTitles: false),
                                    ),
                                    topTitles: const AxisTitles(
                                      sideTitles: SideTitles(showTitles: false),
                                    ),
                                    bottomTitles: AxisTitles(
                                      sideTitles: SideTitles(
                                        showTitles: true,
                                        reservedSize: 25,
                                        interval: 1,
                                        getTitlesWidget: (value, meta) {
                                          const days = ["M", "T", "W", "T", "F", "S", "S"];
                                          if (value.toInt() >= 0 && value.toInt() < days.length) {
                                            return Padding(
                                              padding: const EdgeInsets.only(top: 4.0),
                                              child: Text(
                                                days[value.toInt()],
                                                style: TextStyle(
                                                  fontSize: 11,
                                                  color: coffeeBrown,
                                                  fontWeight: FontWeight.w500,
                                                ),
                                              ),
                                            );
                                          }
                                          return const Text('');
                                        },
                                      ),
                                    ),
                                    leftTitles: AxisTitles(
                                      sideTitles: SideTitles(
                                        showTitles: true,
                                        reservedSize: 30,
                                        interval: 50,
                                        getTitlesWidget: (value, meta) {
                                          return Padding(
                                            padding: const EdgeInsets.only(right: 4.0),
                                            child: Text(
                                              '${value.toInt()}%',
                                              style: TextStyle(
                                                fontSize: 10,
                                                color: coffeeBrown,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          );
                                        },
                                      ),
                                    ),
                                  ),
                                  borderData: FlBorderData(
                                    show: true,
                                    border: Border(
                                      bottom: BorderSide(color: Colors.grey.withOpacity(0.3)),
                                      left: BorderSide(color: Colors.grey.withOpacity(0.3)),
                                    ),
                                  ),
                                  lineBarsData: [
                                    LineChartBarData(
                                      spots: graphData,
                                      isCurved: true,
                                      color: caramelBrown,
                                      barWidth: 2,
                                      dotData: FlDotData(
                                        show: true,
                                        getDotPainter: (spot, percent, barData, index) {
                                          return FlDotCirclePainter(
                                            radius: 3,
                                            color: caramelBrown,
                                            strokeWidth: 1.5,
                                            strokeColor: Colors.white,
                                          );
                                        },
                                      ),
                                      belowBarData: BarAreaData(
                                        show: true,
                                        color: caramelBrown.withOpacity(0.1),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            
                            const SizedBox(width: 20),
                            
                            // Right side - Completion percentage display
                            Expanded(
                              flex: 2,
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Container(
                                    padding: const EdgeInsets.all(20),
                                    decoration: BoxDecoration(
                                      color: caramelBrown.withOpacity(0.1),
                                      shape: BoxShape.circle,
                                      border: Border.all(
                                        color: caramelBrown.withOpacity(0.3),
                                        width: 2,
                                      ),
                                    ),
                                    child: Column(
                                      children: [
                                        Text(
                                          "$weeklyPercentage%",
                                          style: TextStyle(
                                            fontSize: 32,
                                            fontWeight: FontWeight.bold,
                                            color: caramelBrown,
                                          ),
                                        ),
                                        const SizedBox(height: 4),
                                        Text(
                                          "Average",
                                          style: TextStyle(
                                            fontSize: 12,
                                            color: coffeeBrown,
                                            fontWeight: FontWeight.w500,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  const SizedBox(height: 16),
                                  Text(
                                    "Weekly Completion Rate",
                                    textAlign: TextAlign.center,
                                    style: TextStyle(
                                      fontSize: 14,
                                      color: coffeeBrown,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// Helper widget to build a stat card
  Widget _buildStatCard(String title, String value, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: cardBg,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: coffeeShadow,
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            value,
            style: TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            title,
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: 14,
              color: coffeeBrown,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
}
