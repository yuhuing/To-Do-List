// TodayTask.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'dart:async';
import 'package:provider/provider.dart';
import '../screens/TaskProvider.dart';
import '../screens/HistoryPage.dart';
import '../screens/TaskModel.dart';
import '../screens/MidnightTaskService.dart';
import '../widgets/AppDrawer.dart';

// Remove this - main() is now in main.dart

class TodayTask extends StatefulWidget {
  const TodayTask({super.key});

  @override
  State<TodayTask> createState() => _TodayTaskState();
}

class _TodayTaskState extends State<TodayTask> {
  Timer? _statusTimer;
  String _midnightStatus = '';
  final TextEditingController _taskController = TextEditingController();
  final TextEditingController _detailsController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _initializeApp();
    _startStatusMonitoring();
  }

  // üîß Ê∑ªÂä†Áªü‰∏ÄÁöÑÈ©¨Êù•Ë•ø‰∫öÊó∂Èó¥ÊñπÊ≥ï
  DateTime _getMalaysiaTime() {
    return DateTime.now().toUtc().add(const Duration(hours: 8));
  }

  DateTime _getMalaysiaDateKey() {
    final malaysiaTime = _getMalaysiaTime();
    return DateTime(malaysiaTime.year, malaysiaTime.month, malaysiaTime.day);
  }

  // Ê∑ªÂä†Áä∂ÊÄÅÁõëÊéßÊñπÊ≥ï
  void _startStatusMonitoring() {
    _statusTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      if (mounted) {
        setState(() {
          final timeUntilMidnight = MidnightTaskService.getTimeUntilMidnight();
          final hours = timeUntilMidnight.inHours;
          final minutes = timeUntilMidnight.inMinutes % 60;
          final seconds = timeUntilMidnight.inSeconds % 60;
          
          _midnightStatus = 'Next midnight in: ${hours}h ${minutes}m ${seconds}s\n'
                          'Handled today: ${MidnightTaskService.isMidnightHandled}';
        });
      }
    });
  }
  
  @override
  void dispose() {
    _statusTimer?.cancel();
    _taskController.dispose();
    _detailsController.dispose();
    super.dispose();
  }

  // Initialize app with Firebase tasks and midnight handling
  Future<void> _initializeApp() async {
    try {
      final taskProvider = Provider.of<TaskProvider>(context, listen: false);
      // Initialize tasks from Firebase
      await taskProvider.initializeTasks();

      // Set up real-time listener
      await MidnightTaskService.initialize(context);
    } catch (e) {
      print('Error initializing app: $e');
    }
  }

  // Task operations - Updated to use async methods
  Future<void> _addTask(String title, String details) async {
    final taskProvider = Provider.of<TaskProvider>(context, listen: false);
    final task = Task(
      title: title,
      details: details,
      dueDate: _getMalaysiaTime(),
      isDone: false,
      priority: Priority.high, // Default priority
    );

    try {
      await taskProvider.addTask(task);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Error adding task: $e"),
            backgroundColor: const Color(0xFFDE0A26),
          ),
        );
      }
    }
  }

  Future<void> _toggleTaskCompletion(Task task) async {
    final taskProvider = Provider.of<TaskProvider>(context, listen: false);
    try {
      await taskProvider.toggleTaskDone(task);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Error updating task: $e"),
            backgroundColor: const Color(0xFFDE0A26),
          ),
        );
      }
    }
  }

  void _confirmDeleteTask(Task task) {
    showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text(
              "Delete Task",
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.brown,
              ),
            ),
            content: const Text("Are you sure you want to delete this task?"),
            actions: [
              TextButton(
                style: TextButton.styleFrom(foregroundColor: Colors.brown[400]),
                onPressed: () => Navigator.of(context).pop(),
                child: const Text("Cancel"),
              ),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF990000),
                  foregroundColor: Colors.white,
                ),
                onPressed: () async {
                  try {
                    await Provider.of<TaskProvider>(
                      context,
                      listen: false,
                    ).removeTask(task);
                    if (mounted) Navigator.of(context).pop();
                  } catch (e) {
                    if (mounted) {
                      Navigator.of(context).pop();
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text("Error deleting task: $e"),
                          backgroundColor: const Color(0xFFDE0A26),
                        ),
                      );
                    }
                  }
                },
                child: const Text("Delete"),
              ),
            ],
          ),
    );
  }

  // Common validation helper
  bool _validateTaskTitle() {
    if (_taskController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Task title cannot be empty."),
          backgroundColor: Color(0xFFDE0A26),
        ),
      );
      return false;
    }
    return true;
  }

  // Common function to clear controllers and close dialog
  void _clearAndClose() {
    _taskController.clear();
    _detailsController.clear();
    Navigator.of(context).pop();
  }

  // Common dialog container
  Widget _buildDialogContainer({
    required String title,
    required List<Widget> children,
  }) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      child: Container(
        width: MediaQuery.of(context).size.width * 0.8,
        constraints: const BoxConstraints(maxHeight: 400),
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: const Color(0xFFFFF3D9),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.brown.withOpacity(0.2),
              blurRadius: 10,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              title,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.brown,
              ),
            ),
            const SizedBox(height: 16),
            ...children,
          ],
        ),
      ),
    );
  }

  // Common dialog buttons
  Widget _buildDialogButtons({
    required VoidCallback onAction,
    required String actionText,
  }) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        TextButton(onPressed: _clearAndClose, child: const Text("Cancel")),
        ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.brown,
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          onPressed: onAction,
          child: Text(actionText),
        ),
      ],
    );
  }

  void _showAddTaskDialog() {
    showDialog(
      context: context,
      builder:
          (context) => _buildDialogContainer(
            title: "Add Task",
            children: [
              _buildTextField(_taskController, "Task Title"),
              const SizedBox(height: 12),
              _buildDetailsField(),
              const SizedBox(height: 20),
              _buildDialogButtons(onAction: _handleAddTask, actionText: "Add"),
            ],
          ),
    );
  }

  void _showEditTaskDialog(Task task) {
    _taskController.text = task.title;
    _detailsController.text = task.details;

    showDialog(
      context: context,
      builder:
          (context) => _buildDialogContainer(
            title: "Edit Task",
            children: [
              _buildTextField(_taskController, "Task Title"),
              const SizedBox(height: 12),
              _buildDetailsField(),
              const SizedBox(height: 20),
              _buildDialogButtons(
                onAction: () => _handleEditTask(task),
                actionText: "Update",
              ),
            ],
          ),
    );
  }

  void _handleAddTask() async {
    if (!_validateTaskTitle()) return;

    // Show loading indicator
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const Center(child: CircularProgressIndicator()),
    );

    try {
      await _addTask(
        _taskController.text.trim(),
        _detailsController.text.trim(),
      );
      if (mounted) {
        Navigator.of(context).pop(); // Close loading dialog
        _clearAndClose(); // Close add task dialog
      }
    } catch (e) {
      if (mounted) {
        Navigator.of(context).pop(); // Close loading dialog
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Error adding task: $e"),
            backgroundColor: const Color(0xFFDE0A26),
          ),
        );
      }
    }
  }

  void _handleEditTask(Task task) async {
    if (!_validateTaskTitle()) return;

    // Show loading indicator
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const Center(child: CircularProgressIndicator()),
    );

    final taskProvider = Provider.of<TaskProvider>(context, listen: false);

    try {
      await taskProvider.updateTask(
        task,
        title: _taskController.text.trim(),
        details: _detailsController.text.trim(),
      );

      if (mounted) {
        Navigator.of(context).pop(); // Close loading dialog
        _clearAndClose(); // Close edit dialog
      }
    } catch (e) {
      if (mounted) {
        Navigator.of(context).pop(); // Close loading dialog
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Error updating task: $e"),
            backgroundColor: const Color(0xFFDE0A26),
          ),
        );
      }
    }
  }

  // UI Builders
  Widget _buildTextField(TextEditingController controller, String label) {
    return TextField(
      controller: controller,
      decoration: InputDecoration(
        labelText: label,
        filled: true,
        fillColor: Colors.white,
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 12,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(15),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }

  Widget _buildDetailsField() {
    return Container(
      height: 120,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
      ),
      child: Scrollbar(
        child: SingleChildScrollView(
          child: TextField(
            controller: _detailsController,
            maxLines: null,
            keyboardType: TextInputType.multiline,
            decoration: const InputDecoration(
              hintText: "Details",
              contentPadding: EdgeInsets.symmetric(
                horizontal: 16,
                vertical: 12,
              ),
              border: InputBorder.none,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTaskCard(Task task) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      margin: const EdgeInsets.symmetric(vertical: 8),
      elevation: 3,
      color: const Color(0xFFF3E5AB),
      child: ListTile(
        contentPadding: const EdgeInsets.all(16),
        title: Text(
          task.title,
          style: TextStyle(
            fontWeight: FontWeight.bold,
            decoration: task.isDone ? TextDecoration.lineThrough : null,
            fontSize: 18,
            color: Colors.brown[900],
          ),
        ),
        subtitle: task.details.isNotEmpty ? Text(task.details) : null,
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: const Icon(Icons.edit, color: Colors.blue),
              tooltip: 'Edit Task',
              onPressed: () => _showEditTaskDialog(task),
            ),
            IconButton(
              icon: Icon(
                task.isDone ? Icons.check_circle : Icons.radio_button_unchecked,
                color: task.isDone ? Colors.green : Colors.brown,
              ),
              onPressed: () => _toggleTaskCompletion(task),
            ),
            IconButton(
              icon: const Icon(Icons.delete, color: Color(0xFF990000)),
              tooltip: 'Delete Task',
              onPressed: () => _confirmDeleteTask(task),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTasksList() {
    return Consumer<TaskProvider>(
      builder: (context, taskProvider, child) {
        // Show loading indicator while tasks are being loaded
        if (taskProvider.isLoading) {
          return const Center(child: CircularProgressIndicator());
        }

        final todayTasks = taskProvider.getTasksFor(_getMalaysiaDateKey());

        if (todayTasks.isEmpty) {
          return const Center(
            child: Padding(
              padding: EdgeInsets.symmetric(vertical: 40),
              child: Text(
                "No tasks for today",
                style: TextStyle(fontSize: 16, color: Colors.grey),
              ),
            ),
          );
        }

        return ListView.builder(
          itemCount: todayTasks.length,
          itemBuilder: (context, index) => _buildTaskCard(todayTasks[index]),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final todayDate = DateFormat(
      'dd/MM/yyyy',
    ).format(_getMalaysiaTime());

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.brown, size: 32),
      ),
      drawer: const AppDrawer(),
      body: Stack(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                const Center(
                  child: Text(
                    "Today's Task",
                    style: TextStyle(
                      fontSize: 30,
                      fontWeight: FontWeight.bold,
                      color: Colors.brown,
                    ),
                  ),
                ),

                // time setting
                if (_midnightStatus.isNotEmpty)
                Container(
                  margin: const EdgeInsets.symmetric(vertical: 10),
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    children: [
                      Text(
                        _midnightStatus,
                        style: const TextStyle(
                          fontSize: 12,
                          color: Colors.blue,
                        ),
                        textAlign: TextAlign.center,
                      ),

                      Text(
                        'Malaysia Time: ${_getMalaysiaTime().toString()}',
                        style: const TextStyle(
                          fontSize: 10,
                          color: Colors.green,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 30),
                
                SizedBox(
                  height: MediaQuery.of(context).size.height * 0.6,
                  child: Container(
                    decoration: BoxDecoration(
                      color: const Color(0xFFFFF3D9),
                      borderRadius: BorderRadius.circular(30),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.brown.withOpacity(0.2),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Align(
                          alignment: Alignment.topRight,
                          child: Text(
                            "Date: $todayDate",
                            style: const TextStyle(
                              fontSize: 14,
                              color: Colors.brown,
                            ),
                          ),
                        ),
                        const SizedBox(height: 10),
                        Expanded(child: _buildTasksList()),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
          Positioned(
            top: 50,
            right: 20,
            child: IconButton(
              icon: const Icon(Icons.history, color: Colors.brown),
              tooltip: "View History",
              onPressed:
                  () => Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => HistoryPage()),
                  ),
            ),
          ),
        ],
      ),
      floatingActionButton: Padding(
        padding: const EdgeInsets.only(bottom: 30),
        child: FloatingActionButton(
          backgroundColor: Colors.brown,
          onPressed: _showAddTaskDialog,
          child: const Icon(Icons.add, size: 30),
        ),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }
}
