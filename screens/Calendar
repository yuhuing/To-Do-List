import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:table_calendar/table_calendar.dart';
import '../widgets/AppDrawer.dart';
import '../screens/TaskProvider.dart'; // ðŸ‘ˆ import your provider

void main() {
  runApp(
    ChangeNotifierProvider(create: (context) => TaskProvider(), child: MyApp()),
  );
}

// Main App Widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Calendar App',
      theme: ThemeData(primarySwatch: Colors.blue),
      debugShowCheckedModeBanner: false,
      home: CalendarPage(), // âœ… <- Your calendar screen here
    );
  }
}

// CalenderPage (Stateful)
// because need to track selected date, completed days and focused month
class CalendarPage extends StatefulWidget {
  @override
  _CalendarPageState createState() => _CalendarPageState();
}

DateTime _stripTime(DateTime dt) => DateTime(dt.year, dt.month, dt.day);

// State Class for CalendarPage
class _CalendarPageState extends State<CalendarPage> {
  DateTime _focusedDay = DateTime.now(); // âœ… Always shows current month/day
  DateTime? _selectedDay; // the day user taps on

  // Build method (UI layout)
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Task Calendar'),
        backgroundColor: const Color(0xFF6F4E37),
      ),

      //List Tile
      drawer: const AppDrawer(),
      
      body: Column(
        children: [
          // calendar widget
          TableCalendar(
            firstDay: DateTime.utc(2020, 1, 1),
            // -------------------------------------
            lastDay: DateTime.utc(2030, 12, 31),
            // -------------------------------------
            focusedDay:
                _focusedDay, // the month that shown on the screen that mentioned before
            calendarFormat: CalendarFormat.month,
            availableCalendarFormats: const {CalendarFormat.month: 'Month'},
            calendarStyle: CalendarStyle(
              todayDecoration: BoxDecoration(
                color: Colors.orangeAccent,
                shape: BoxShape.circle,
              ),
              selectedDecoration: BoxDecoration(
                color: Colors.brown,
                shape: BoxShape.circle,
              ),
              markerDecoration: BoxDecoration(shape: BoxShape.circle),
              weekendTextStyle: TextStyle(color: Colors.grey.shade700),
            ),
            selectedDayPredicate: (day) => isSameDay(_selectedDay, day),

            // 1. Updates _delectedday and _focusedDay
            // 2. opens bottom sheet if tasks exist on that date
            onDaySelected: (selected, focused) {
              final normalized = _stripTime(selected);

              setState(() {
                _selectedDay = selected;
                _focusedDay = focused;
              });

              if (Provider.of<TaskProvider>(
                context,
                listen: false,
              ).getTasksFor(normalized).isNotEmpty) {
                showModalBottomSheet(
                  context: context,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.vertical(
                      top: Radius.circular(20),
                    ),
                  ),
                  builder: (context) => _buildTaskList(normalized),
                );
              }
            },

            // Calendar builders
            calendarBuilders: CalendarBuilders(
              markerBuilder: (context, date, events) {
                final normalizedDate = _stripTime(date);
                final taskProvider = Provider.of<TaskProvider>(context);
                final tasksForDate = taskProvider.getTasksFor(normalizedDate);

                if (tasksForDate.isEmpty) return const SizedBox.shrink();

                final now = DateTime.now();
                final daysLeft =
                    normalizedDate.difference(_stripTime(now)).inDays;

                List<Color> colors =
                    tasksForDate.map((task) {
                      if (daysLeft <= 3) {
                        return Colors.red;
                      } else if (daysLeft <= 7) {
                        return Colors.yellow;
                      } else {
                        return Colors.green;
                      }
                    }).toList();

                return Wrap(
                  alignment: WrapAlignment.center,
                  spacing: 2,
                  children:
                      colors.take(3).map((color) {
                        return Container(
                          width: 8,
                          height: 8,
                          margin: const EdgeInsets.symmetric(vertical: 1),
                          decoration: BoxDecoration(
                            color: color,
                            shape: BoxShape.circle,
                          ),
                        );
                      }).toList(),
                );
              },
            ),
          ),
          const Spacer(),
        ],
      ),
      // bottomNavigationBar: Container(
      //   height: 70,
      //   decoration: const BoxDecoration(
      //     color: Color(0xFFEADDC8), // Soft beige
      //     borderRadius: BorderRadius.only(
      //       topLeft: Radius.circular(20),
      //       topRight: Radius.circular(20),
      //     ),
      //   ),
      //   child: Row(
      //     mainAxisAlignment: MainAxisAlignment.spaceAround,
      //     children: [
      //       IconButton(
      //         icon: const Icon(Icons.today),
      //         onPressed: () {}, // Todayâ€™s Task
      //       ),
      //       IconButton(
      //         icon: const Icon(Icons.access_time),
      //         onPressed: () {}, // Long-term Tasks
      //       ),
      //       Container(
      //         height: 60,
      //         width: 60,
      //         decoration: BoxDecoration(
      //           color: Color(0xFF6F4E37), // Brown center button
      //           shape: BoxShape.circle,
      //         ),
      //         child: IconButton(
      //           icon: const Icon(Icons.calendar_month, color: Colors.white),
      //           onPressed: () {}, // Calendar
      //         ),
      //       ),
      //       IconButton(
      //         icon: const Icon(Icons.groups),
      //         onPressed: () {}, // Group Collaboration
      //       ),
      //       IconButton(
      //         icon: const Icon(Icons.person),
      //         onPressed: () {}, // Profile
      //       ),
      //     ],
      //   ),
      // ),
    );
  }

  // Task List Modal Sheet
  Widget _buildTaskList(DateTime day) {
    final tasks = Provider.of<TaskProvider>(context).getTasksFor(day);

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            '${day.day}',
            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          ...tasks.map(
            (task) => Card(
              color: Colors.green.shade100,
              child: ListTile(
                title: Text(task.title),
                trailing: const Icon(Icons.check_box_outline_blank),
                subtitle: const Text('Details...'),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Navigation button widget
  Widget _navButton(String label) {
    return ElevatedButton(
      onPressed: () {
        // Add navigation logic here
      },
      style: ElevatedButton.styleFrom(
        backgroundColor:
            label == 'Page 4' ? Colors.orange : const Color(0xFF6F4E37),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
      child: Text(label),
    );
  }
}
