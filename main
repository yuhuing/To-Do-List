import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../auth/login_screen.dart';
import '../screens/TodayTask.dart';
import '../screens/LongTerm.dart';
import '../screens/Calendar.dart';
import '../screens/PersonalProfile.dart';
import '../screens/TaskProvider.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  if (kIsWeb) {
    await Firebase.initializeApp(
      options: const FirebaseOptions(
        apiKey: "AIzaSyC0IvQyNjpVr1G2EAd8Ua5Z4wcrUY6DA2E",
        authDomain: "cafechecklist3.firebaseapp.com",
        projectId: "cafechecklist3",
        storageBucket: "cafechecklist3.firebasestorage.app",
        messagingSenderId: "238182649434",
        appId: "1:238182649434:web:f85346d1ed66612b7bd263",
        measurementId: "G-0HCFQ5R4YY",
      ),
    );
  } else {
    await Firebase.initializeApp();
  }
  
  // UNCOMMENT THE LINE BELOW TO FORCE LOGOUT ON APP START (for testing)
  // await FirebaseAuth.instance.signOut();
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => TaskProvider()),
      ],
      child: MaterialApp(
        title: 'To-Do List App',
        debugShowCheckedModeBanner: false,
        // OPTION 1: Use AuthWrapper (recommended for production)
        home: const AuthWrapper(),
        
        // OPTION 2: Always show LoginScreen (uncomment line below and comment line above)
        // home: const LoginScreen(),
        
        routes: {
          '/login': (context) => LoginScreen(),
          '/today': (context) => TodayTask(),
          '/longterm': (context) => LongTermTask(),
          '/calendar': (context) => CalendarPage(),
          '/profile': (context) => PersonalProfile(),
        },
      ),
    );
  }
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        // Show loading while checking auth state
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
            backgroundColor: Color(0xFFFFF3D9),
            body: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(color: Colors.brown),
                  SizedBox(height: 16),
                  Text(
                    'Loading...',
                    style: TextStyle(
                      color: Colors.brown,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
            ),
          );
        }
        
        // If user is logged in, show TodayTask (main app)
        if (snapshot.hasData && snapshot.data != null) {
          print('User is logged in: ${snapshot.data!.email}');
          return const TodayTask();
        }
        
        // If not logged in, show LoginScreen
        print('User is not logged in, showing LoginScreen');
        return const LoginScreen();
      },
    );
  }
}
