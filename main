import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../auth/login_screen.dart';
import '../screens/TodayTask.dart';
import '../screens/LongTerm.dart';
import '../screens/Calendar.dart';
import '../screens/PersonalProfile.dart';
import '../screens/TaskProvider.dart';
// Import your splash screen here
import 'screens/CoffeeSplashScreen.dart'; // Make sure to create this file with the CoffeeProgressSplash

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
     
  if (kIsWeb) {
    await Firebase.initializeApp(
      options: const FirebaseOptions(
        apiKey: "AIzaSyC0IvQyNjpVr1G2EAd8Ua5Z4wcrUY6DA2E",
        authDomain: "cafechecklist3.firebaseapp.com",
        projectId: "cafechecklist3",
        storageBucket: "cafechecklist3.firebasestorage.app",
        messagingSenderId: "238182649434",
        appId: "1:238182649434:web:f85346d1ed66612b7bd263",
        measurementId: "G-0HCFQ5R4YY",
      ),
    );
  } else {
    await Firebase.initializeApp();
  }
      
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => TaskProvider()),
      ],
      child: MaterialApp(
        title: 'CafeChecklist',
        debugShowCheckedModeBanner: false,
        // Show splash screen first with coffee progress
        home: CoffeeProgressSplash(
          nextScreen: const AuthWrapper(),
        ),
        routes: {
          '/login': (context) => LoginScreen(),
          '/today': (context) => TodayTask(),
          '/longterm': (context) => LongTermTask(),
          '/calendar': (context) => CalendarPage(),
          '/profile': (context) => PersonalProfile(),
        },
      ),
    );
  }
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  // Coffee theme colors
  static const Color espresso = Color(0xFF2C1810);
  static const Color coffeeBrown = Color(0xFF4A2C2A);
  static const Color caramelBrown = Color(0xFF8B5A2B);
  static const Color creamWhite = Color(0xFFFAF7F2);
  static const Color milkFoam = Color(0xFFF5F2ED);

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        // Show loading while checking auth state
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Scaffold(
            body: Container(
              width: double.infinity,
              height: double.infinity,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    creamWhite,
                    milkFoam,
                    caramelBrown.withOpacity(0.1),
                  ],
                ),
              ),
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // Coffee cup loading indicator
                    Container(
                      width: 60,
                      height: 60,
                      decoration: BoxDecoration(
                        color: coffeeBrown,
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: espresso.withOpacity(0.2),
                            blurRadius: 10,
                            offset: const Offset(0, 5),
                          ),
                        ],
                      ),
                      child: Stack(
                        children: [
                          Positioned(
                            top: 8,
                            left: 8,
                            right: 8,
                            bottom: 8,
                            child: Container(
                              decoration: BoxDecoration(
                                color: espresso,
                                borderRadius: BorderRadius.circular(6),
                              ),
                            ),
                          ),
                          Positioned(
                            top: 8,
                            left: 8,
                            right: 8,
                            height: 10,
                            child: Container(
                              decoration: BoxDecoration(
                                color: milkFoam,
                                borderRadius: const BorderRadius.only(
                                  topLeft: Radius.circular(6),
                                  topRight: Radius.circular(6),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 24),
                    SizedBox(
                      width: 30,
                      height: 30,
                      child: CircularProgressIndicator(
                        strokeWidth: 3,
                        valueColor: AlwaysStoppedAnimation<Color>(caramelBrown),
                      ),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'Checking authentication...',
                      style: TextStyle(
                        color: coffeeBrown,
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        }
                
        // If user is logged in, show TodayTask (main app)
        if (snapshot.hasData && snapshot.data != null) {
          print('User is logged in: ${snapshot.data!.email}');
          return const TodayTask();
        }
                
        // If not logged in, show LoginScreen
        print('User is not logged in, showing LoginScreen');
        return const LoginScreen();
      },
    );
  }
}
