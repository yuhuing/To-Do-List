import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:fl_chart/fl_chart.dart';
import 'TaskModel.dart';
import '../widget/AppDrawer.dart';
import 'TaskProvider.dart';

class PersonalProfile extends StatefulWidget {
  const PersonalProfile({super.key});

  @override
  State<PersonalProfile> createState() => _PersonalProfileState();
}

class _PersonalProfileState extends State<PersonalProfile> {
  // Color constants matching the pattern
  static const Color espresso = Color(0xFF2C1810);
  static const Color coffeeBrown = Color(0xFF4A2C2A);
  static const Color caramelBrown = Color(0xFF8B5A2B);
  static const Color creamWhite = Color(0xFFFAF7F2);
  static const Color milkFoam = Color(0xFFF5F2ED);
  static const Color cardBg = Color(0xFFFFFFFF);
  static const Color coffeeShadow = Color(0x1A2C1810);

  // State variables for database data
  List<Task> todayTasks = [];
  Map<DateTime, List<Task>> weeklyTasks = {};
  bool isLoading = true;
  String? errorMessage;

  @override
  void initState() {
    super.initState();
    _loadTaskData();
  }

  /// Load task data from TaskProvider
  Future<void> _loadTaskData() async {
    if (!mounted) return;
    
    setState(() {
      isLoading = true;
      errorMessage = null;
    });

    try {
      final taskProvider = Provider.of<TaskProvider>(context, listen: false);
      
      // Ensure tasks are initialized from database
      await taskProvider.initializeTasks();
      
      // Get today's date
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      
      // Calculate start of current week (Monday)
      final startOfWeek = today.subtract(Duration(days: today.weekday - 1));
      
      // Get today's tasks using existing method
      final todayTasksList = taskProvider.getTasksFor(today);
      
      // Get all tasks from TaskProvider
      final allTasksMap = taskProvider.allTasks;
      
      // Filter weekly tasks (last 7 days from start of week)
      Map<DateTime, List<Task>> weeklyTasksMap = {};
      
      for (int i = 0; i < 7; i++) {
        final date = startOfWeek.add(Duration(days: i));
        final tasksForDate = taskProvider.getTasksFor(date);
        if (tasksForDate.isNotEmpty) {
          weeklyTasksMap[date] = tasksForDate;
        }
      }

      if (mounted) {
        setState(() {
          todayTasks = todayTasksList;
          weeklyTasks = weeklyTasksMap;
          isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          errorMessage = "Error loading tasks: $e";
          isLoading = false;
        });
      }
    }
  }

  /// Refresh data when needed
  Future<void> _refreshData() async {
    await _loadTaskData();
  }

  /// Calculates the fraction of tasks done this week
  double getWeeklyCompletionRate() {
    if (weeklyTasks.isEmpty) return 0.0;

    final allWeeklyTasks = weeklyTasks.values.expand((tasks) => tasks).toList();
    if (allWeeklyTasks.isEmpty) return 0.0;

    final completed = allWeeklyTasks.where((task) => task.isDone).length;
    return completed / allWeeklyTasks.length;
  }

  /// Builds the data points for the 7â€‘day line graph
  List<FlSpot> getWeeklyGraphData() {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final startOfWeek = today.subtract(Duration(days: today.weekday - 1));

    // Initialize data for each day of the week
    List<FlSpot> spots = [];

    for (int i = 0; i < 7; i++) {
      final date = startOfWeek.add(Duration(days: i));
      final tasksForDay = weeklyTasks[date] ?? [];
      
      double percentage = 0.0;
      if (tasksForDay.isNotEmpty) {
        final completed = tasksForDay.where((task) => task.isDone).length;
        percentage = (completed / tasksForDay.length) * 100;
      }
      
      spots.add(FlSpot(i.toDouble(), percentage));
    }

    return spots;
  }

  @override
  Widget build(BuildContext context) {
    final completed = todayTasks.where((t) => t.isDone).length;
    final remaining = todayTasks.where((t) => !t.isDone).length;
    final weeklyPercentage = (getWeeklyCompletionRate() * 100).toStringAsFixed(1);
    final graphData = getWeeklyGraphData();

    return Scaffold(
      drawer: const AppDrawer(),
      backgroundColor: creamWhite,
      appBar: AppBar(
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Icon(Icons.coffee, color: Colors.white, size: 20),
            ),
            const SizedBox(width: 12),
            const Text(
              "Personal Profile",
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
          ],
        ),
        backgroundColor: espresso,
        foregroundColor: Colors.white,
        centerTitle: true,
        elevation: 0,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [espresso, coffeeBrown],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _refreshData,
            tooltip: 'Refresh Data',
          ),
        ],
      ),
      body: SafeArea(
        child: RefreshIndicator(
          onRefresh: _refreshData,
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: _buildBody(completed, remaining, weeklyPercentage, graphData),
          ),
        ),
      ),
    );
  }

  Widget _buildBody(int completed, int remaining, String weeklyPercentage, List<FlSpot> graphData) {
    if (isLoading) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(caramelBrown),
            ),
            SizedBox(height: 16),
            Text(
              "Loading your progress...",
              style: TextStyle(
                color: coffeeBrown,
                fontSize: 16,
              ),
            ),
          ],
        ),
      );
    }

    if (errorMessage != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: coffeeBrown.withOpacity(0.6),
            ),
            const SizedBox(height: 16),
            Text(
              errorMessage!,
              textAlign: TextAlign.center,
              style: TextStyle(
                color: coffeeBrown,
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _refreshData,
              style: ElevatedButton.styleFrom(
                backgroundColor: caramelBrown,
                foregroundColor: Colors.white,
              ),
              child: const Text("Retry"),
            ),
          ],
        ),
      );
    }

    return Column(
      children: [
        // Top Row - Profile and Stats
        Row(
          children: [
            // Profile Avatar Section
            Expanded(
              flex: 2,
              child: Container(
                height: 160,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: cardBg,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: coffeeShadow,
                      blurRadius: 8,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircleAvatar(
                      radius: 35,
                      backgroundColor: caramelBrown.withOpacity(0.2),
                      child: Icon(
                        Icons.person,
                        size: 40,
                        color: caramelBrown,
                      ),
                    ),
                    const SizedBox(height: 12),
                    Text(
                      "Welcome Back!",
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: espresso,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(width: 12),
            
            // Today's Tasks Stats
            Expanded(
              flex: 3,
              child: Row(
                children: [
                  Expanded(
                    child: _buildStatCard("Completed", "$completed", Colors.green),
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: _buildStatCard("Pending", "$remaining", Colors.red),
                  ),
                ],
              ),
            ),
          ],
        ),

        const SizedBox(height: 16),

        // Combined Weekly Progress Chart and Stats
        Expanded(
          child: Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: cardBg,
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: coffeeShadow,
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Header with title and percentage
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "Weekly Progress",
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: espresso,
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: caramelBrown.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(20),
                        border: Border.all(
                          color: caramelBrown.withOpacity(0.3),
                          width: 1.5,
                        ),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            "$weeklyPercentage%",
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: caramelBrown,
                            ),
                          ),
                          const SizedBox(width: 4),
                          Text(
                            "avg",
                            style: TextStyle(
                              fontSize: 12,
                              color: coffeeBrown,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                
                // Chart
                Expanded(
                  child: LineChart(
                    LineChartData(
                      minX: 0,
                      maxX: 6,
                      minY: 0,
                      maxY: 100,
                      gridData: FlGridData(
                        show: true,
                        drawVerticalLine: false,
                        horizontalInterval: 25,
                        getDrawingHorizontalLine: (value) {
                          return FlLine(
                            color: Colors.grey.withOpacity(0.2),
                            strokeWidth: 1,
                          );
                        },
                      ),
                      titlesData: FlTitlesData(
                        rightTitles: const AxisTitles(
                          sideTitles: SideTitles(showTitles: false),
                        ),
                        topTitles: const AxisTitles(
                          sideTitles: SideTitles(showTitles: false),
                        ),
                        bottomTitles: AxisTitles(
                          sideTitles: SideTitles(
                            showTitles: true,
                            reservedSize: 30,
                            interval: 1,
                            getTitlesWidget: (value, meta) {
                              const days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
                              if (value.toInt() >= 0 && value.toInt() < days.length) {
                                return Padding(
                                  padding: const EdgeInsets.only(top: 6.0),
                                  child: Text(
                                    days[value.toInt()],
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: coffeeBrown,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                );
                              }
                              return const Text('');
                            },
                          ),
                        ),
                        leftTitles: AxisTitles(
                          sideTitles: SideTitles(
                            showTitles: true,
                            reservedSize: 40,
                            interval: 25,
                            getTitlesWidget: (value, meta) {
                              return Padding(
                                padding: const EdgeInsets.only(right: 6.0),
                                child: Text(
                                  '${value.toInt()}%',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: coffeeBrown,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                      borderData: FlBorderData(
                        show: true,
                        border: Border(
                          bottom: BorderSide(color: Colors.grey.withOpacity(0.3)),
                          left: BorderSide(color: Colors.grey.withOpacity(0.3)),
                        ),
                      ),
                      lineBarsData: [
                        LineChartBarData(
                          spots: graphData,
                          isCurved: true,
                          color: caramelBrown,
                          barWidth: 3,
                          dotData: FlDotData(
                            show: true,
                            getDotPainter: (spot, percent, barData, index) {
                              return FlDotCirclePainter(
                                radius: 4,
                                color: caramelBrown,
                                strokeWidth: 2,
                                strokeColor: Colors.white,
                              );
                            },
                          ),
                          belowBarData: BarAreaData(
                            show: true,
                            color: caramelBrown.withOpacity(0.1),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                
                // Bottom encouragement text
                const SizedBox(height: 12),
                Center(
                  child: Text(
                    "Keep up the great work!",
                    style: TextStyle(
                      fontSize: 14,
                      color: coffeeBrown,
                      fontStyle: FontStyle.italic,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  /// Helper widget to build a stat card
  Widget _buildStatCard(String title, String value, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: cardBg,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: coffeeShadow,
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            value,
            style: TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            title,
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: 13,
              color: coffeeBrown,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
}
