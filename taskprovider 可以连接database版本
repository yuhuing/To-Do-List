import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'TaskModel.dart';

class TaskProvider with ChangeNotifier {
  final Map<DateTime, List<Task>> _tasks = {};

  /// Adds a task to the specified date and uploads to Firebase
  Future<void> addTask(Task task) async {
    final key = DateTime(task.dueDate.year, task.dueDate.month, task.dueDate.day);
    _tasks.putIfAbsent(key, () => []).add(task);
    notifyListeners();

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final uid = user.uid;
    final dateKey = "${key.year}-${key.month.toString().padLeft(2, '0')}-${key.day.toString().padLeft(2, '0')}";

    final dbRef = FirebaseDatabase.instance
        .ref()
        .child('tasks')
        .child(uid)
        .child(dateKey)
        .push();

    await dbRef.set(task.toJson());
  }

  /// Loads tasks from Firebase for a given date
  Future<void> loadTasksForDate(DateTime date) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final uid = user.uid;
    final key = DateTime(date.year, date.month, date.day);
    final dateKey = "${key.year}-${key.month.toString().padLeft(2, '0')}-${key.day.toString().padLeft(2, '0')}";

    final snapshot = await FirebaseDatabase.instance
        .ref()
        .child('tasks')
        .child(uid)
        .child(dateKey)
        .get();

    if (snapshot.exists) {
      List<Task> tasks = [];
      for (var child in snapshot.children) {
        final data = Map<String, dynamic>.from(child.value as Map);
        tasks.add(Task.fromJson(data));
      }
      _tasks[key] = tasks;
      notifyListeners();
    }
  }

  /// Gets all tasks for a specific date
  List<Task> getTasksFor(DateTime date) {
    final key = DateTime(date.year, date.month, date.day);
    return _tasks[key] ?? [];
  }

  /// Returns all tasks
  Map<DateTime, List<Task>> get allTasks => _tasks;

  /// Toggle task completion and update Firebase
  Future<void> toggleTaskDone(DateTime date, Task task) async {
    final key = DateTime(date.year, date.month, date.day);
    final taskList = _tasks[key];

    if (taskList != null) {
      final index = taskList.indexOf(task);
      if (index != -1) {
        taskList[index].isDone = !taskList[index].isDone;
        notifyListeners();

        final user = FirebaseAuth.instance.currentUser;
        if (user == null) return;

        final uid = user.uid;
        final dateKey = "${key.year}-${key.month.toString().padLeft(2, '0')}-${key.day.toString().padLeft(2, '0')}";

        final snapshot = await FirebaseDatabase.instance
            .ref()
            .child('tasks')
            .child(uid)
            .child(dateKey)
            .get();

        for (var child in snapshot.children) {
          final data = Map<String, dynamic>.from(child.value as Map);
          if (data['title'] == task.title && data['details'] == task.details) {
            await child.ref.update({ 'isDone': taskList[index].isDone });
            break;
          }
        }
      }
    }
  }

  /// Remove a task from local state and Firebase
  Future<void> removeTask(DateTime date, Task task) async {
    final key = DateTime(date.year, date.month, date.day);
    _tasks[key]?.remove(task);
    notifyListeners();

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final uid = user.uid;
    final dateKey = "${key.year}-${key.month.toString().padLeft(2, '0')}-${key.day.toString().padLeft(2, '0')}";

    final snapshot = await FirebaseDatabase.instance
        .ref()
        .child('tasks')
        .child(uid)
        .child(dateKey)
        .get();

    for (var child in snapshot.children) {
      final data = Map<String, dynamic>.from(child.value as Map);
      if (data['title'] == task.title && data['details'] == task.details) {
        await child.ref.remove();
        break;
      }
    }
  }
}
