import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../widget/AppDrawer.dart';

void main() {
  runApp(MaterialApp(
    home: GroupCollaborationPage(),
    debugShowCheckedModeBanner: false,
  ));
}

// ======= COLOR CONSTANTS (MOVED OUTSIDE CLASS) =======
// Rich coffee color palette
const Color espresso = Color(0xFF2C1810);
const Color coffeeBrown = Color(0xFF4A2C2A);
const Color caramelBrown = Color(0xFF8B5A2B);
const Color creamWhite = Color(0xFFFAF7F2);
const Color milkFoam = Color(0xFFF5F2ED);
const Color cardBg = Color(0xFFFFFFFF);
const Color coffeeShadow = Color(0x1A2C1810);

// ======= MODELS =======
class GroupMember {
  final String id;
  final String name;
  final String email;
  final List<Task> tasks;

  GroupMember({
    required this.id,
    required this.name,
    required this.email,
  }) : tasks = [];

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'email': email,
    };
  }

  factory GroupMember.fromMap(Map<String, dynamic> map) {
    return GroupMember(
      id: map['id'] ?? '',
      name: map['name'] ?? '',
      email: map['email'] ?? '',
    );
  }
}

class Task {
  final String id;
  final String title;
  final String assignedTo; // member ID
  final String createdBy; // member ID
  final DateTime createdAt;
  bool isCompleted;

  Task({
    required this.id,
    required this.title,
    required this.assignedTo,
    required this.createdBy,
    required this.createdAt,
    this.isCompleted = false,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'assignedTo': assignedTo,
      'createdBy': createdBy,
      'createdAt': createdAt.millisecondsSinceEpoch,
      'isCompleted': isCompleted,
    };
  }

  factory Task.fromMap(Map<String, dynamic> map) {
    return Task(
      id: map['id'] ?? '',
      title: map['title'] ?? '',
      assignedTo: map['assignedTo'] ?? '',
      createdBy: map['createdBy'] ?? '',
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] ?? 0),
      isCompleted: map['isCompleted'] ?? false,
    );
  }
}

class Group {
  final String id;
  final String name;
  final String createdBy;
  final List<GroupMember> members;
  final List<Task> tasks;

  Group({
    required this.id,
    required this.name,
    required this.createdBy,
  }) : members = [], tasks = [];

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'createdBy': createdBy,
      'members': members.map((member) => member.toMap()).toList(),
    };
  }

  factory Group.fromMap(Map<String, dynamic> map) {
    final group = Group(
      id: map['id'] ?? '',
      name: map['name'] ?? '',
      createdBy: map['createdBy'] ?? '',
    );
    
    if (map['members'] != null) {
      group.members.addAll(
        (map['members'] as List).map((memberMap) => GroupMember.fromMap(memberMap))
      );
    }
    
    return group;
  }

  // Check if current user is the creator
  bool isCreatedByCurrentUser() {
    final user = FirebaseAuth.instance.currentUser;
    return user != null && createdBy == user.uid;
  }

  // Check if current user is a member
  bool isCurrentUserMember() {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return false;
    return members.any((member) => member.id == user.uid);
  }

  // Check if current user can manage the group (creator or member)
  bool canCurrentUserManage() {
    return isCreatedByCurrentUser() || isCurrentUserMember();
  }
}

// ======= FIREBASE SERVICE =======
class FirebaseService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  // Get current user
  static User? get currentUser => _auth.currentUser;

  // Find user by email
  static Future<DocumentSnapshot?> findUserByEmail(String email) async {
    try {
      final querySnapshot = await _firestore
          .collection('users')
          .where('email', isEqualTo: email.toLowerCase())
          .limit(1)
          .get();
      
      if (querySnapshot.docs.isNotEmpty) {
        return querySnapshot.docs.first;
      }
      return null;
    } catch (e) {
      print('Error finding user: $e');
      return null;
    }
  }

  // Create group
  static Future<String?> createGroup(String groupName) async {
    try {
      final user = currentUser;
      if (user == null) return null;

      final groupDoc = _firestore.collection('groups').doc();
      final group = Group(
        id: groupDoc.id,
        name: groupName,
        createdBy: user.uid,
      );

      // Add creator as the first member
      final userDoc = await _firestore.collection('users').doc(user.uid).get();
      if (userDoc.exists) {
        final userData = userDoc.data() as Map<String, dynamic>;
        final creatorMember = GroupMember(
          id: user.uid,
          name: userData['name'] ?? user.email?.split('@')[0] ?? 'User',
          email: user.email ?? '',
        );
        group.members.add(creatorMember);
      }

      await groupDoc.set(group.toMap());

      // Add group to user's groups list
      await _firestore.collection('users').doc(user.uid).update({
        'groups': FieldValue.arrayUnion([groupDoc.id]),
      });

      return groupDoc.id;
    } catch (e) {
      print('Error creating group: $e');
      return null;
    }
  }

  // Add member to group
  static Future<bool> addMemberToGroup(String groupId, String memberEmail) async {
    try {
      final userDoc = await findUserByEmail(memberEmail);
      if (userDoc == null) return false;

      final userData = userDoc.data() as Map<String, dynamic>;
      final member = GroupMember(
        id: userDoc.id,
        name: userData['name'] ?? memberEmail.split('@')[0],
        email: memberEmail,
      );

      // Check if member already exists in the group
      final groupDoc = await _firestore.collection('groups').doc(groupId).get();
      if (groupDoc.exists) {
        final groupData = groupDoc.data() as Map<String, dynamic>;
        final existingMembers = List<Map<String, dynamic>>.from(groupData['members'] ?? []);
        
        // Check if user is already a member
        bool alreadyMember = existingMembers.any((m) => m['id'] == userDoc.id);
        if (alreadyMember) {
          print('User is already a member of this group');
          return false;
        }
      }

      await _firestore.collection('groups').doc(groupId).update({
        'members': FieldValue.arrayUnion([member.toMap()]),
      });

      // Add group to user's groups
      await _firestore.collection('users').doc(userDoc.id).update({
        'groups': FieldValue.arrayUnion([groupId]),
      });

      return true;
    } catch (e) {
      print('Error adding member: $e');
      return false;
    }
  }

  // Create task
  static Future<String?> createTask(String groupId, String title, String assignedToId) async {
    try {
      final user = currentUser;
      if (user == null) return null;

      final taskDoc = _firestore.collection('groups').doc(groupId).collection('tasks').doc();
      final task = Task(
        id: taskDoc.id,
        title: title,
        assignedTo: assignedToId,
        createdBy: user.uid,
        createdAt: DateTime.now(),
      );

      await taskDoc.set(task.toMap());

      // Add task to user's personal tasks
      await _firestore.collection('users').doc(assignedToId).update({
        'tasks': FieldValue.arrayUnion([{
          'taskId': taskDoc.id,
          'groupId': groupId,
          'title': title,
          'createdAt': DateTime.now().millisecondsSinceEpoch,
        }]),
      });

      return taskDoc.id;
    } catch (e) {
      print('Error creating task: $e');
      return null;
    }
  }

  // Delete task
  static Future<bool> deleteTask(String groupId, String taskId, String assignedToId) async {
    try {
      await _firestore.collection('groups').doc(groupId).collection('tasks').doc(taskId).delete();

      // Remove from user's personal tasks
      final userDoc = await _firestore.collection('users').doc(assignedToId).get();
      if (userDoc.exists) {
        final userData = userDoc.data() as Map<String, dynamic>;
        final tasks = List<Map<String, dynamic>>.from(userData['tasks'] ?? []);
        tasks.removeWhere((task) => task['taskId'] == taskId);
        
        await _firestore.collection('users').doc(assignedToId).update({
          'tasks': tasks,
        });
      }

      return true;
    } catch (e) {
      print('Error deleting task: $e');
      return false;
    }
  }

  // Toggle task completion
  static Future<bool> toggleTaskCompletion(String groupId, String taskId, bool isCompleted) async {
    try {
      await _firestore.collection('groups').doc(groupId).collection('tasks').doc(taskId).update({
        'isCompleted': isCompleted,
      });
      return true;
    } catch (e) {
      print('Error toggling task: $e');
      return false;
    }
  }

  // Get groups stream - Updated to include groups where user is a member
  static Stream<List<Group>> getGroupsStream() {
    final user = currentUser;
    if (user == null) return Stream.value([]);

    return _firestore
        .collection('groups')
        .snapshots()
        .map((snapshot) {
      List<Group> userGroups = [];
      
      for (var doc in snapshot.docs) {
        final data = doc.data();
        final group = Group.fromMap(data);
        
        // Include groups where user is creator OR member
        if (group.createdBy == user.uid || 
            group.members.any((member) => member.id == user.uid)) {
          userGroups.add(group);
        }
      }
      
      return userGroups;
    });
  }

  // Alternative method using user's groups list (more efficient for large datasets)
  static Stream<List<Group>> getUserGroupsStream() {
    final user = currentUser;
    if (user == null) return Stream.value([]);

    return _firestore
        .collection('users')
        .doc(user.uid)
        .snapshots()
        .asyncMap((userDoc) async {
      if (!userDoc.exists) return <Group>[];
      
      final userData = userDoc.data() as Map<String, dynamic>;
      final groupIds = List<String>.from(userData['groups'] ?? []);
      
      if (groupIds.isEmpty) return <Group>[];
      
      List<Group> groups = [];
      
      // Fetch each group
      for (String groupId in groupIds) {
        try {
          final groupDoc = await _firestore.collection('groups').doc(groupId).get();
          if (groupDoc.exists) {
            final groupData = groupDoc.data() as Map<String, dynamic>;
            groups.add(Group.fromMap(groupData));
          }
        } catch (e) {
          print('Error fetching group $groupId: $e');
        }
      }
      
      return groups;
    });
  }

  // Get tasks stream for a group
  static Stream<List<Task>> getTasksStream(String groupId) {
    return _firestore
        .collection('groups')
        .doc(groupId)
        .collection('tasks')
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        final data = doc.data();
        return Task.fromMap(data);
      }).toList();
    });
  }
}

// ======= MAIN PAGE =======
class GroupCollaborationPage extends StatefulWidget {
  @override
  State<GroupCollaborationPage> createState() => _GroupCollaborationPageState();
}

class _GroupCollaborationPageState extends State<GroupCollaborationPage> {
  final TextEditingController _groupController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      drawer: const AppDrawer(),
      backgroundColor: creamWhite,
      appBar: AppBar(
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(Icons.group, color: Colors.white, size: 20),
            ),
            const SizedBox(width: 12),
            const Text(
              "Group Collaboration",
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
          ],
        ),
        backgroundColor: espresso,
        foregroundColor: Colors.white,
        centerTitle: true,
        elevation: 0,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [espresso, coffeeBrown],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
      ),
      
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(12),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _groupController,
                    decoration: const InputDecoration(
                      labelText: 'Enter group name',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () async {
                    if (_groupController.text.trim().isNotEmpty) {
                      final groupId = await FirebaseService.createGroup(_groupController.text.trim());
                      if (groupId != null) {
                        _groupController.clear();
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('Group created successfully!')),
                        );
                      } else {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('Failed to create group')),
                        );
                      }
                    }
                  },
                  child: const Text("Add Group"),
                ),
              ],
            ),
          ),
          Expanded(
            child: StreamBuilder<List<Group>>(
              stream: FirebaseService.getGroupsStream(), // This now includes groups where user is a member
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return const Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.group_off, size: 64, color: Colors.grey),
                        SizedBox(height: 16),
                        Text(
                          'No groups yet',
                          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                        SizedBox(height: 8),
                        Text(
                          'Create your first group or wait to be added to one!',
                          style: TextStyle(color: Colors.grey),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  );
                }

                final groups = snapshot.data!;
                return ListView.builder(
                  itemCount: groups.length,
                  itemBuilder: (context, index) {
                    return GroupCard(group: groups[index]);
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// ======= GROUP CARD =======
class GroupCard extends StatelessWidget {
  final Group group;

  const GroupCard({super.key, required this.group});

  @override
  Widget build(BuildContext context) {
    final TextEditingController _memberController = TextEditingController();
    final TextEditingController _taskController = TextEditingController();
    final bool isCreator = group.isCreatedByCurrentUser();

    return Card(
      elevation: 3,
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      child: ExpansionTile(
        title: Row(
          children: [
            Expanded(
              child: Text(
                group.name, 
                style: const TextStyle(fontWeight: FontWeight.bold)
              ),
            ),
            if (isCreator)
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.blue[100],
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  'Owner',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.blue[800],
                    fontWeight: FontWeight.bold,
                  ),
                ),
              )
            else
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.green[100],
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  'Member',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.green[800],
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
          ],
        ),
        subtitle: Text('${group.members.length} members'),
        children: [
          // Add Member Section - Only show if user is creator
          if (isCreator)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 4),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _memberController,
                      decoration: const InputDecoration(
                        labelText: 'Add member by email',
                        border: OutlineInputBorder(),
                        hintText: 'example@gmail.com',
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: () async {
                      if (_memberController.text.trim().isNotEmpty) {
                        final success = await FirebaseService.addMemberToGroup(
                          group.id,
                          _memberController.text.trim(),
                        );
                        
                        if (success) {
                          _memberController.clear();
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Member added successfully!')),
                          );
                        } else {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('User not found or already a member')),
                          );
                        }
                      }
                    },
                    child: const Text("Add"),
                  ),
                ],
              ),
            ),

          // Create Task Section - Available to all members
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 4),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _taskController,
                    decoration: const InputDecoration(
                      labelText: 'Create new task',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () {
                    if (_taskController.text.trim().isNotEmpty) {
                      _showAssignTaskDialog(context, group, _taskController.text.trim());
                      _taskController.clear();
                    }
                  },
                  child: const Text("Create Task"),
                ),
              ],
            ),
          ),

          // Members List
          if (group.members.isNotEmpty) ...[
            const Padding(
              padding: EdgeInsets.all(12.0),
              child: Text('Members:', style: TextStyle(fontWeight: FontWeight.bold)),
            ),
            ...group.members.map((member) {
              final isCurrentUser = FirebaseAuth.instance.currentUser?.uid == member.id;
              return ListTile(
                leading: CircleAvatar(
                  backgroundColor: isCurrentUser ? Colors.blue : Colors.grey,
                  child: Text(
                    member.name[0].toUpperCase(),
                    style: const TextStyle(color: Colors.white),
                  ),
                ),
                title: Text(
                  member.name + (isCurrentUser ? ' (You)' : ''),
                  style: TextStyle(
                    fontWeight: isCurrentUser ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
                subtitle: Text(member.email),
                trailing: (isCreator && !isCurrentUser) 
                  ? IconButton(
                      icon: const Icon(Icons.remove_circle, color: Colors.red),
                      onPressed: () => _showRemoveMemberDialog(context, group, member),
                    )
                  : null,
              );
            }),
          ],

          // Tasks by Member Section
          StreamBuilder<List<Task>>(
            stream: FirebaseService.getTasksStream(group.id),
            builder: (context, snapshot) {
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Padding(
                  padding: EdgeInsets.all(12.0),
                  child: Text('No tasks assigned yet.'),
                );
              }

              final tasks = snapshot.data!;
              return TasksByMemberView(
                tasks: tasks,
                group: group,
              );
            },
          ),
        ],
      ),
    );
  }

  void _showAssignTaskDialog(BuildContext context, Group group, String taskTitle) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Assign Task'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('Task: $taskTitle'),
            const SizedBox(height: 16),
            const Text('Assign to:'),
            ...group.members.map((member) => ListTile(
              title: Text(member.name),
              subtitle: Text(member.email),
              onTap: () async {
                Navigator.pop(context);
                final taskId = await FirebaseService.createTask(
                  group.id,
                  taskTitle,
                  member.id,
                );
                
                if (taskId != null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Task assigned to ${member.name}')),
                  );
                }
              },
            )),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }

  void _showRemoveMemberDialog(BuildContext context, Group group, GroupMember member) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Remove Member'),
        content: Text('Are you sure you want to remove ${member.name} from this group?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: Implement remove member functionality
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Remove member functionality coming soon!')),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Remove'),
          ),
        ],
      ),
    );
  }
}

// ======= TASKS BY MEMBER VIEW =======
class TasksByMemberView extends StatelessWidget {
  final List<Task> tasks;
  final Group group;

  const TasksByMemberView({
    super.key,
    required this.tasks,
    required this.group,
  });

  @override
  Widget build(BuildContext context) {
    // Group tasks by member
    Map<String, List<Task>> tasksByMember = {};
    
    // Initialize with all members (even those without tasks)
    for (var member in group.members) {
      tasksByMember[member.id] = [];
    }
    
    // Group tasks by assigned member
    for (var task in tasks) {
      if (tasksByMember.containsKey(task.assignedTo)) {
        tasksByMember[task.assignedTo]!.add(task);
      }
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.all(12.0),
          child: Text('Tasks by Member:', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
        ),
        ...group.members.map((member) {
          final memberTasks = tasksByMember[member.id] ?? [];
          return MemberTasksCard(
            member: member,
            tasks: memberTasks,
            group: group,
          );
        }),
      ],
    );
  }
}

// ======= MEMBER TASKS CARD =======
class MemberTasksCard extends StatelessWidget {
  final GroupMember member;
  final List<Task> tasks;
  final Group group;

  const MemberTasksCard({
    super.key,
    required this.member,
    required this.tasks,
    required this.group,
  });

  @override
  Widget build(BuildContext context) {
    final completedTasks = tasks.where((task) => task.isCompleted).length;
    final totalTasks = tasks.length;
    final isCurrentUser = FirebaseAuth.instance.currentUser?.uid == member.id;

    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      child: ExpansionTile(
        leading: CircleAvatar(
          backgroundColor: _getProgressColor(completedTasks, totalTasks),
          child: Text(
            member.name[0].toUpperCase(),
            style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
          ),
        ),
        title: Text(
          member.name + (isCurrentUser ? ' (You)' : ''),
          style: TextStyle(
            fontWeight: isCurrentUser ? FontWeight.bold : FontWeight.w500,
          ),
        ),
        subtitle: Row(
          children: [
            Text(member.email),
            const SizedBox(width: 8),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
              decoration: BoxDecoration(
                color: _getProgressColor(completedTasks, totalTasks).withOpacity(0.2),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                '$completedTasks/$totalTasks tasks',
                style: TextStyle(
                  fontSize: 12,
                  color: _getProgressColor(completedTasks, totalTasks),
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        children: [
          if (tasks.isEmpty)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: Text(
                'No tasks assigned',
                style: TextStyle(
                  fontStyle: FontStyle.italic,
                  color: Colors.grey,
                ),
              ),
            )
          else ...[
            // Progress bar
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text('Progress:', style: TextStyle(fontWeight: FontWeight.bold)),
                      Text('${((completedTasks / totalTasks) * 100).round()}%'),
                    ],
                  ),
                  const SizedBox(height: 4),
                  LinearProgressIndicator(
                    value: totalTasks > 0 ? completedTasks / totalTasks : 0,
                    backgroundColor: Colors.grey[300],
                    valueColor: AlwaysStoppedAnimation<Color>(
                      _getProgressColor(completedTasks, totalTasks),
                    ),
                  ),
                ],
              ),
            ),
            const Divider(),
            // Tasks list
            ...tasks.map((task) => TaskListItem(
              task: task,
              group: group,
              showAssignedTo: false, // Don't show "assigned to" since it's grouped by member
            )),
          ],
          // Quick add task button
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: () => _showQuickAddTaskDialog(context, member),
                icon: const Icon(Icons.add),
                label: Text('Add task for ${member.name}'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue[50], 
                  foregroundColor: Colors.blue[700],                                
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color _getProgressColor(int completed, int total) {
    if (total == 0) return Colors.grey;
    final percentage = completed / total;
    if (percentage == 1.0) return Colors.green;
    if (percentage >= 0.7) return Colors.orange;
    return Colors.red;
  }

  void _showQuickAddTaskDialog(BuildContext context, GroupMember member) {
    final TextEditingController taskController = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Add Task for ${member.name}'),
        content: TextField(
          controller: taskController,
          decoration: const InputDecoration(
            labelText: 'Task title',
            border: OutlineInputBorder(),
          ),
          autofocus: true,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (taskController.text.trim().isNotEmpty) {
                Navigator.pop(context);
                final taskId = await FirebaseService.createTask(
                  group.id,
                  taskController.text.trim(),
                  member.id,
                );
                
                if (taskId != null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Task assigned to ${member.name}')),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Failed to create task')),
                  );
                }
              }
            },
            child: const Text('Add Task'),
          ),
        ],
      ),
    );
  }
}

// ======= TASK LIST ITEM =======
class TaskListItem extends StatelessWidget {
  final Task task;
  final Group group;
  final bool showAssignedTo;

  const TaskListItem({
    super.key,
    required this.task,
    required this.group,
    this.showAssignedTo = true,
  });

  @override
  Widget build(BuildContext context) {
    final assignedMember = group.members.firstWhere(
      (member) => member.id == task.assignedTo,
      orElse: () => GroupMember(id: '', name: 'Unknown', email: ''),
    );
    
    final createdByMember = group.members.firstWhere(
      (member) => member.id == task.createdBy,
      orElse: () => GroupMember(id: '', name: 'Unknown', email: ''),
    );

    final currentUser = FirebaseAuth.instance.currentUser;
    final canManageTask = currentUser != null && 
        (task.createdBy == currentUser.uid || 
         task.assignedTo == currentUser.uid || 
         group.isCreatedByCurrentUser());

    return ListTile(
      leading: Checkbox(
        value: task.isCompleted,
        onChanged: canManageTask ? (value) async {
          final success = await FirebaseService.toggleTaskCompletion(
            group.id,
            task.id,
            value ?? false,
          );
          
          if (!success) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Failed to update task')),
            );
          }
        } : null,
      ),
      title: Text(
        task.title,
        style: TextStyle(
          decoration: task.isCompleted ? TextDecoration.lineThrough : null,
          color: task.isCompleted ? Colors.grey : null,
        ),
      ),
      subtitle: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (showAssignedTo)
            Text('Assigned to: ${assignedMember.name}'),
          Text('Created by: ${createdByMember.name}'),
          Text(
            'Created: ${_formatDate(task.createdAt)}',
            style: const TextStyle(fontSize: 12, color: Colors.grey),
          ),
        ],
      ),
      trailing: canManageTask
          ? PopupMenuButton<String>(
              onSelected: (value) {
                if (value == 'delete') {
                  _showDeleteTaskDialog(context);
                }
              },
              itemBuilder: (context) => [
                const PopupMenuItem(
                  value: 'delete',
                  child: Row(
                    children: [
                      Icon(Icons.delete, color: Colors.red),
                      SizedBox(width: 8),
                      Text('Delete Task'),
                    ],
                  ),
                ),
              ],
            )
          : null,
    );
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  void _showDeleteTaskDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Task'),
        content: Text('Are you sure you want to delete "${task.title}"?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              final success = await FirebaseService.deleteTask(
                group.id,
                task.id,
                task.assignedTo,
              );
              
              if (success) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Task deleted successfully')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Failed to delete task')),
                );
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }
}

// ======= ENHANCED FIREBASE SERVICE UPDATES =======
// Add these methods to your existing FirebaseService class:

extension FirebaseServiceExtensions on FirebaseService {
  // Remove member from group
  static Future<bool> removeMemberFromGroup(String groupId, String memberId) async {
    try {
      final groupDoc = await FirebaseService._firestore.collection('groups').doc(groupId).get();
      if (!groupDoc.exists) return false;

      final groupData = groupDoc.data() as Map<String, dynamic>;
      final members = List<Map<String, dynamic>>.from(groupData['members'] ?? []);
      
      // Remove the member
      members.removeWhere((member) => member['id'] == memberId);
      
      // Update the group
      await FirebaseService._firestore.collection('groups').doc(groupId).update({
        'members': members,
      });

      // Remove group from user's groups list
      await FirebaseService._firestore.collection('users').doc(memberId).update({
        'groups': FieldValue.arrayRemove([groupId]),
      });

      // Delete all tasks assigned to this member in this group
      final tasksSnapshot = await FirebaseService._firestore
          .collection('groups')
          .doc(groupId)
          .collection('tasks')
          .where('assignedTo', isEqualTo: memberId)
          .get();

      for (var taskDoc in tasksSnapshot.docs) {
        await taskDoc.reference.delete();
      }

      // Remove tasks from user's personal tasks
      final userDoc = await FirebaseService._firestore.collection('users').doc(memberId).get();
      if (userDoc.exists) {
        final userData = userDoc.data() as Map<String, dynamic>;
        final tasks = List<Map<String, dynamic>>.from(userData['tasks'] ?? []);
        tasks.removeWhere((task) => task['groupId'] == groupId);
        
        await FirebaseService._firestore.collection('users').doc(memberId).update({
          'tasks': tasks,
        });
      }

      return true;
    } catch (e) {
      print('Error removing member: $e');
      return false;
    }
  }

  // Get user's personal tasks across all groups
  static Stream<List<Map<String, dynamic>>> getUserPersonalTasksStream() {
    final user = FirebaseService.currentUser;
    if (user == null) return Stream.value([]);

    return FirebaseService._firestore
        .collection('users')
        .doc(user.uid)
        .snapshots()
        .map((userDoc) {
      if (!userDoc.exists) return <Map<String, dynamic>>[];
      
      final userData = userDoc.data() as Map<String, dynamic>;
      return List<Map<String, dynamic>>.from(userData['tasks'] ?? []);
    });
  }

  // Create user document if it doesn't exist
  static Future<void> ensureUserDocument() async {
    final user = FirebaseService.currentUser;
    if (user == null) return;

    final userDoc = await FirebaseService._firestore.collection('users').doc(user.uid).get();
    if (!userDoc.exists) {
      await FirebaseService._firestore.collection('users').doc(user.uid).set({
        'email': user.email,
        'name': user.displayName ?? user.email?.split('@')[0] ?? 'User',
        'groups': [],
        'tasks': [],
        'createdAt': DateTime.now().millisecondsSinceEpoch,
      });
    }
  }

  // Update user profile
  static Future<bool> updateUserProfile({
    required String name,
    String? photoUrl,
  }) async {
    try {
      final user = FirebaseService.currentUser;
      if (user == null) return false;

      await FirebaseService._firestore.collection('users').doc(user.uid).update({
        'name': name,
        if (photoUrl != null) 'photoUrl': photoUrl,
      });

      return true;
    } catch (e) {
      print('Error updating profile: $e');
      return false;
    }
  }
}

// ======= UPDATED GROUP CARD WITH REMOVE MEMBER FUNCTIONALITY =======
class GroupCardUpdated extends StatelessWidget {
  final Group group;

  const GroupCardUpdated({super.key, required this.group});

  @override
  Widget build(BuildContext context) {
    final TextEditingController _memberController = TextEditingController();
    final TextEditingController _taskController = TextEditingController();
    final bool isCreator = group.isCreatedByCurrentUser();

    return Card(
      elevation: 3,
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      child: ExpansionTile(
        title: Row(
          children: [
            Expanded(
              child: Text(
                group.name, 
                style: const TextStyle(fontWeight: FontWeight.bold)
              ),
            ),
            if (isCreator)
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.blue[100],
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  'Owner',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.blue[800],
                    fontWeight: FontWeight.bold,
                  ),
                ),
              )
            else
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.green[100],
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  'Member',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.green[800],
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
          ],
        ),
        subtitle: Text('${group.members.length} members'),
        children: [
          // Add Member Section - Only show if user is creator
          if (isCreator)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 4),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _memberController,
                      decoration: const InputDecoration(
                        labelText: 'Add member by email',
                        border: OutlineInputBorder(),
                        hintText: 'example@gmail.com',
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: () async {
                      if (_memberController.text.trim().isNotEmpty) {
                        final success = await FirebaseService.addMemberToGroup(
                          group.id,
                          _memberController.text.trim(),
                        );
                        
                        if (success) {
                          _memberController.clear();
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Member added successfully!')),
                          );
                        } else {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('User not found or already a member')),
                          );
                        }
                      }
                    },
                    child: const Text("Add"),
                  ),
                ],
              ),
            ),

          // Create Task Section - Available to all members
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 4),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _taskController,
                    decoration: const InputDecoration(
                      labelText: 'Create new task',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () {
                    if (_taskController.text.trim().isNotEmpty) {
                      _showAssignTaskDialog(context, group, _taskController.text.trim());
                      _taskController.clear();
                    }
                  },
                  child: const Text("Create Task"),
                ),
              ],
            ),
          ),

          // Members List
          if (group.members.isNotEmpty) ...[
            const Padding(
              padding: EdgeInsets.all(12.0),
              child: Text('Members:', style: TextStyle(fontWeight: FontWeight.bold)),
            ),
            ...group.members.map((member) {
              final isCurrentUser = FirebaseAuth.instance.currentUser?.uid == member.id;
              return ListTile(
                leading: CircleAvatar(
                  backgroundColor: isCurrentUser ? Colors.blue : Colors.grey,
                  child: Text(
                    member.name[0].toUpperCase(),
                    style: const TextStyle(color: Colors.white),
                  ),
                ),
                title: Text(
                  member.name + (isCurrentUser ? ' (You)' : ''),
                  style: TextStyle(
                    fontWeight: isCurrentUser ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
                subtitle: Text(member.email),
                trailing: (isCreator && !isCurrentUser) 
                  ? IconButton(
                      icon: const Icon(Icons.remove_circle, color: Colors.red),
                      onPressed: () => _showRemoveMemberDialog(context, group, member),
                    )
                  : null,
              );
            }),
          ],

          // Tasks by Member Section
          StreamBuilder<List<Task>>(
            stream: FirebaseService.getTasksStream(group.id),
            builder: (context, snapshot) {
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Padding(
                  padding: EdgeInsets.all(12.0),
                  child: Text('No tasks assigned yet.'),
                );
              }

              final tasks = snapshot.data!;
              return TasksByMemberView(
                tasks: tasks,
                group: group,
              );
            },
          ),
        ],
      ),
    );
  }

  void _showAssignTaskDialog(BuildContext context, Group group, String taskTitle) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Assign Task'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('Task: $taskTitle'),
            const SizedBox(height: 16),
            const Text('Assign to:'),
            ...group.members.map((member) => ListTile(
              title: Text(member.name),
              subtitle: Text(member.email),
              onTap: () async {
                Navigator.pop(context);
                final taskId = await FirebaseService.createTask(
                  group.id,
                  taskTitle,
                  member.id,
                );
                
                if (taskId != null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Task assigned to ${member.name}')),
                  );
                }
              },
            )),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }

  void _showRemoveMemberDialog(BuildContext context, Group group, GroupMember member) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Remove Member'),
        content: Text('Are you sure you want to remove ${member.name} from this group?\n\nThis will also delete all tasks assigned to them.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              final success = await FirebaseServiceExtensions.removeMemberFromGroup(
                group.id,
                member.id,
              );
              
              if (success) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('${member.name} removed from group')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Failed to remove member')),
                );
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Remove'),
          ),
        ],
      ),
    );
  }
}
