import 'package:flutter/material.dart';
import 'AppDrawer.dart';

void main() {
  runApp(MaterialApp(
    home: GroupCollaborationPage(),
    debugShowCheckedModeBanner: false,
  ));
}

// ======= MODELS =======
class GroupMember {
  final String name;
  final List<String> tasks;

  GroupMember({required this.name}) : tasks = [];
}

class Group {
  final String name;
  final List<GroupMember> members;

  Group({required this.name}) : members = [];
}

// ======= MAIN PAGE =======
class GroupCollaborationPage extends StatefulWidget {

  @override
  State<GroupCollaborationPage> createState() => _GroupCollaborationPageState();
}

class _GroupCollaborationPageState extends State<GroupCollaborationPage> {
  final TextEditingController _groupController = TextEditingController();
  final List<Group> _groups = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Group Collaboration"),
        backgroundColor: Colors.brown[400],
      ),

      //List Tile
      drawer: AppDrawer(),
      
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(12),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _groupController,
                    decoration: const InputDecoration(
                      labelText: 'Enter group name',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () {
                    if (_groupController.text.trim().isNotEmpty) {
                      setState(() {
                        _groups.add(Group(name: _groupController.text.trim()));
                        _groupController.clear();
                      });
                    }
                  },
                  child: const Text("Add Group"),
                ),
              ],
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: _groups.length,
              itemBuilder: (context, index) {
                return GroupCard(
                  group: _groups[index],
                  onUpdate: () => setState(() {}),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// ======= GROUP CARD =======
class GroupCard extends StatelessWidget {
  final Group group;
  final VoidCallback onUpdate;

  const GroupCard({super.key, required this.group, required this.onUpdate});

  @override
  Widget build(BuildContext context) {
    final TextEditingController _memberController = TextEditingController();

    return Card(
      elevation: 3,
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      child: ExpansionTile(
        title: Text(group.name, style: const TextStyle(fontWeight: FontWeight.bold)),
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 4),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _memberController,
                    decoration: const InputDecoration(
                      labelText: 'Add member',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () {
                    if (_memberController.text.trim().isNotEmpty) {
                      group.members.add(GroupMember(name: _memberController.text.trim()));
                      _memberController.clear();
                      onUpdate();
                    }
                  },
                  child: const Text("Add"),
                ),
              ],
            ),
          ),
          ...group.members.asMap().entries.map((entry) {
            final memberIndex = entry.key;
            final member = entry.value;
            return MemberCard(
              member: member,
              onAddTask: (task) {
                member.tasks.add(task);
                onUpdate();
              },
              onRemoveTask: (taskIndex) {
                member.tasks.removeAt(taskIndex);
                onUpdate();
              },
            );
          }),
        ],
      ),
    );
  }
}

// ======= MEMBER CARD =======
class MemberCard extends StatelessWidget {
  final GroupMember member;
  final Function(String task) onAddTask;
  final Function(int taskIndex) onRemoveTask;

  const MemberCard({
    super.key,
    required this.member,
    required this.onAddTask,
    required this.onRemoveTask,
  });

  @override
  Widget build(BuildContext context) {
    final TextEditingController _taskController = TextEditingController();

    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      child: ExpansionTile(
        title: Text(member.name),
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 4),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _taskController,
                    decoration: const InputDecoration(
                      labelText: 'New Task',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () {
                    if (_taskController.text.trim().isNotEmpty) {
                      onAddTask(_taskController.text.trim());
                      _taskController.clear();
                    }
                  },
                  child: const Text("Add Task"),
                ),
              ],
            ),
          ),
          ...member.tasks.asMap().entries.map((entry) {
            final taskIndex = entry.key;
            final task = entry.value;
            return ListTile(
              title: Text(task),
              trailing: IconButton(
                icon: const Icon(Icons.delete, color: Colors.red),
                onPressed: () => onRemoveTask(taskIndex),
              ),
            );
          }),
        ],
      ),
    );
  }
}
